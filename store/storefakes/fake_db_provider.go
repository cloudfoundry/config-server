// Code generated by counterfeiter. DO NOT EDIT.
package storefakes

import (
	"sync"

	"github.com/cloudfoundry/config-server/store"
)

type FakeDbProvider struct {
	DbStub        func() (store.IDb, error)
	dbMutex       sync.RWMutex
	dbArgsForCall []struct{}
	dbReturns     struct {
		result1 store.IDb
		result2 error
	}
	dbReturnsOnCall map[int]struct {
		result1 store.IDb
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDbProvider) Db() (store.IDb, error) {
	fake.dbMutex.Lock()
	ret, specificReturn := fake.dbReturnsOnCall[len(fake.dbArgsForCall)]
	fake.dbArgsForCall = append(fake.dbArgsForCall, struct{}{})
	fake.recordInvocation("Db", []interface{}{})
	fake.dbMutex.Unlock()
	if fake.DbStub != nil {
		return fake.DbStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.dbReturns.result1, fake.dbReturns.result2
}

func (fake *FakeDbProvider) DbCallCount() int {
	fake.dbMutex.RLock()
	defer fake.dbMutex.RUnlock()
	return len(fake.dbArgsForCall)
}

func (fake *FakeDbProvider) DbReturns(result1 store.IDb, result2 error) {
	fake.DbStub = nil
	fake.dbReturns = struct {
		result1 store.IDb
		result2 error
	}{result1, result2}
}

func (fake *FakeDbProvider) DbReturnsOnCall(i int, result1 store.IDb, result2 error) {
	fake.DbStub = nil
	if fake.dbReturnsOnCall == nil {
		fake.dbReturnsOnCall = make(map[int]struct {
			result1 store.IDb
			result2 error
		})
	}
	fake.dbReturnsOnCall[i] = struct {
		result1 store.IDb
		result2 error
	}{result1, result2}
}

func (fake *FakeDbProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.dbMutex.RLock()
	defer fake.dbMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDbProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ store.DbProvider = new(FakeDbProvider)
